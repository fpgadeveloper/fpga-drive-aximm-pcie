Opsero Electronic Design Inc. 2024
Jeff Johnson
AR 76647 QDMA Bridge Support Fixes for RC Linux Driver patch 2023.2
===================================================================
This patch was derived from the patch for version 2023.1 of the tools provided here
https://support.xilinx.com/s/article/76647?language=en_US
We just updated it for the release tag xlnx_rebase_v6.1_LTS_2023.2, no changes made.

diff --git a/drivers/pci/controller/pcie-xdma-pl.c b/drivers/pci/controller/pcie-xdma-pl.c
index dc192c93a062..c32f2e1a3333 100644
--- a/drivers/pci/controller/pcie-xdma-pl.c
+++ b/drivers/pci/controller/pcie-xdma-pl.c
@@ -100,14 +100,27 @@
 
 #define DMA_BRIDGE_BASE_OFF		0xCD8
 
+#define BDF_ENTRY_ADDR_LO		0x2420
+#define BDF_ENTRY_ADDR_HI		0x2424
+#define BDF_ENTRY_PASID			0x2428
+#define BDF_ENTRY_FUNCTION		0x242C
+#define BDF_ENTRY_WINDOW		0x2430
+#define BDF_ENTRY_REG			0x2434
+
+#define BDF_NUM_WINDOWS			8
+#define BDF_ADDR_BOUNDARY		4096
+#define BDF_TABLE_ENTRY_OFF		0x20
+#define BDF_ACCESS_PERM			0xC0000000
+
 enum msi_mode {
 	MSI_DECD_MODE = 1,
 	MSI_FIFO_MODE,
 };
 
-enum xdma_config {
+enum dma_config {
 	XDMA_ZYNQMP_PL = 1,
 	XDMA_VERSAL_PL,
+	QDMA_VERSAL_PL
 };
 
 struct xilinx_msi {
@@ -131,10 +144,11 @@ struct xilinx_msi {
  * @msi: MSI information
  * @irq_misc: Legacy and error interrupt number
  * @msi_mode: MSI mode
- * @xdma_config: XDMA IP configuration
+ * @dma_config: XDMA IP configuration
  */
 struct xilinx_pcie_port {
 	void __iomem *reg_base;
+	void __iomem *cfg_base;
 	u32 irq;
 	u8 root_busno;
 	struct device *dev;
@@ -143,12 +157,13 @@ struct xilinx_pcie_port {
 	struct xilinx_msi msi;
 	int irq_misc;
 	u8 msi_mode;
-	u8 xdma_config;
+	u8 dma_config;
+	raw_spinlock_t lock;
 };
 
 static inline u32 pcie_read(struct xilinx_pcie_port *port, u32 reg)
 {
-	if (port->xdma_config == XDMA_ZYNQMP_PL)
+	if (port->dma_config == XDMA_ZYNQMP_PL)
 		return readl(port->reg_base + reg);
 	else
 		return readl(port->reg_base + reg + DMA_BRIDGE_BASE_OFF);
@@ -156,7 +171,7 @@ static inline u32 pcie_read(struct xilinx_pcie_port *port, u32 reg)
 
 static inline void pcie_write(struct xilinx_pcie_port *port, u32 val, u32 reg)
 {
-	if (port->xdma_config == XDMA_ZYNQMP_PL)
+	if (port->dma_config == XDMA_ZYNQMP_PL)
 		writel(val, port->reg_base + reg);
 	else
 		writel(val, port->reg_base + reg + DMA_BRIDGE_BASE_OFF);
@@ -228,7 +243,7 @@ static void __iomem *xilinx_pcie_map_bus(struct pci_bus *bus,
 	relbus = (bus->number << ECAM_BUS_NUM_SHIFT) |
 		 (devfn << ECAM_DEV_NUM_SHIFT);
 
-	return port->reg_base + relbus + where;
+	return port->cfg_base + relbus + where;
 }
 
 /* PCIe operations */
@@ -253,6 +268,40 @@ static void xilinx_pcie_enable_msi(struct xilinx_pcie_port *port)
 	pcie_write(port, lower_32_bits(msg_addr), XILINX_PCIE_REG_MSIBASE2);
 }
 
+static void xilinx_mask_leg_irq(struct irq_data *data)
+{
+	struct xilinx_pcie_port *port = irq_data_get_irq_chip_data(data);
+	unsigned long flags;
+	u32 mask;
+	u32 val;
+
+	mask = BIT(data->hwirq + XILINX_PCIE_IDRN_SHIFT);
+	raw_spin_lock_irqsave(&port->lock, flags);
+	val = pcie_read(port, XILINX_PCIE_REG_IDRN_MASK);
+	pcie_write(port, (val & (~mask)), XILINX_PCIE_REG_IDRN_MASK);
+	raw_spin_unlock_irqrestore(&port->lock, flags);
+}
+
+static void xilinx_unmask_leg_irq(struct irq_data *data)
+{
+	struct xilinx_pcie_port *port = irq_data_get_irq_chip_data(data);
+	unsigned long flags;
+	u32 mask;
+	u32 val;
+
+	mask = BIT(data->hwirq + XILINX_PCIE_IDRN_SHIFT);
+	raw_spin_lock_irqsave(&port->lock, flags);
+	val = pcie_read(port, XILINX_PCIE_REG_IDRN_MASK);
+	pcie_write(port, (val | mask), XILINX_PCIE_REG_IDRN_MASK);
+	raw_spin_unlock_irqrestore(&port->lock, flags);
+}
+
+static struct irq_chip xilinx_leg_irq_chip = {
+	.name           = "INTx",
+	.irq_mask       = xilinx_mask_leg_irq,
+	.irq_unmask     = xilinx_unmask_leg_irq,
+};
+
 /**
  * xilinx_pcie_intx_map - Set the handler for the INTx and mark IRQ as valid
  * @domain: IRQ domain
@@ -264,7 +313,7 @@ static void xilinx_pcie_enable_msi(struct xilinx_pcie_port *port)
 static int xilinx_pcie_intx_map(struct irq_domain *domain, unsigned int irq,
 				irq_hw_number_t hwirq)
 {
-	irq_set_chip_and_handler(irq, &dummy_irq_chip, handle_simple_irq);
+	irq_set_chip_and_handler(irq, &xilinx_leg_irq_chip, handle_level_irq);
 	irq_set_chip_data(irq, domain->host_data);
 	irq_set_status_flags(irq, IRQ_LEVEL);
 
@@ -572,6 +621,7 @@ static int xilinx_pcie_init_irq_domain(struct xilinx_pcie_port *port)
 		return PTR_ERR(port->leg_domain);
 	}
 
+	raw_spin_lock_init(&port->lock);
 	xilinx_pcie_init_msi_irq_domain(port);
 
 	return 0;
@@ -581,13 +631,48 @@ static int xilinx_pcie_init_irq_domain(struct xilinx_pcie_port *port)
  * xilinx_pcie_init_port - Initialize hardware
  * @port: PCIe port information
  */
-static void xilinx_pcie_init_port(struct xilinx_pcie_port *port)
+static int xilinx_pcie_init_port(struct xilinx_pcie_port *port)
 {
 	if (xilinx_pcie_link_is_up(port))
 		dev_info(port->dev, "PCIe Link is UP\n");
 	else
 		dev_info(port->dev, "PCIe Link is DOWN\n");
 
+	/* QDMA BDF Table Entry */
+	if (port->dma_config == QDMA_VERSAL_PL) {
+		struct resource res;
+		struct of_pci_range range;
+		struct of_pci_range_parser parser;
+		unsigned long bar_addr, size;
+		int err, i;
+
+		err = of_pci_range_parser_init(&parser, port->dev->of_node);
+		if (err) {
+		       pr_err("parser init failed\n");
+		       return err;
+		}
+
+		for_each_of_pci_range(&parser, &range) {
+		       err = of_pci_range_to_resource(&range, port->dev->of_node, &res);
+		       if (err) {
+			       continue;
+		       }
+		       bar_addr = res.start;
+		       size = res.end - res.start + 1;
+		       for (i = 0; i < BDF_NUM_WINDOWS; i++) {
+			       writel(lower_32_bits(bar_addr) + (i * (size/BDF_NUM_WINDOWS)),
+				       port->reg_base + BDF_ENTRY_ADDR_LO + (i * BDF_TABLE_ENTRY_OFF));
+			       writel(upper_32_bits(bar_addr),
+				       port->reg_base + BDF_ENTRY_ADDR_HI + (i * BDF_TABLE_ENTRY_OFF));
+			       writel(0x0, port->reg_base + BDF_ENTRY_PASID + (i * BDF_TABLE_ENTRY_OFF));
+			       writel(0x0, port->reg_base + BDF_ENTRY_FUNCTION + (i * BDF_TABLE_ENTRY_OFF));
+			       writel(BDF_ACCESS_PERM + (size/(BDF_NUM_WINDOWS * BDF_ADDR_BOUNDARY)),
+				       port->reg_base + BDF_ENTRY_WINDOW + (i * BDF_TABLE_ENTRY_OFF));
+			       writel(0x0, port->reg_base + BDF_ENTRY_REG + (i * BDF_TABLE_ENTRY_OFF));
+		       }
+		}
+	}
+
 	/* Disable all interrupts */
 	pcie_write(port, ~XILINX_PCIE_IDR_ALL_MASK,
 		   XILINX_PCIE_REG_IMR);
@@ -611,6 +696,7 @@ static void xilinx_pcie_init_port(struct xilinx_pcie_port *port)
 			 XILINX_PCIE_REG_RPSC_BEN,
 		   XILINX_PCIE_REG_RPSC);
 
+	return 0;
 }
 
 static int xilinx_request_misc_irq(struct xilinx_pcie_port *port)
@@ -675,34 +761,32 @@ static int xilinx_pcie_parse_dt(struct xilinx_pcie_port *port)
 {
 	struct device *dev = port->dev;
 	struct device_node *node = dev->of_node;
-	struct resource regs;
-	const char *type;
+	struct resource *res;
 	int err, mode_val, val;
 
 	if (of_device_is_compatible(node, "xlnx,xdma-host-3.00"))
-		port->xdma_config = XDMA_ZYNQMP_PL;
+		port->dma_config = XDMA_ZYNQMP_PL;
+	else if (of_device_is_compatible(node, "xlnx,qdma-host-3.00"))
+		port->dma_config = QDMA_VERSAL_PL;
 	else if (of_device_is_compatible(node, "xlnx,pcie-dma-versal-2.0"))
-		port->xdma_config = XDMA_VERSAL_PL;
-
-	if (port->xdma_config == XDMA_ZYNQMP_PL ||
-	    port->xdma_config == XDMA_VERSAL_PL) {
-		type = of_get_property(node, "device_type", NULL);
-		if (!type || strcmp(type, "pci")) {
-			dev_err(dev, "invalid \"device_type\" %s\n", type);
-			return -EINVAL;
-		}
+		port->dma_config = XDMA_VERSAL_PL;
 
-		err = of_address_to_resource(node, 0, &regs);
-		if (err) {
-			dev_err(dev, "missing \"reg\" property\n");
-			return err;
-		}
+	if (port->dma_config == XDMA_ZYNQMP_PL ||
+	    port->dma_config == XDMA_VERSAL_PL || port->dma_config == QDMA_VERSAL_PL) {
+		struct platform_device *pdev = to_platform_device(dev);
 
-		port->reg_base = devm_ioremap_resource(dev, &regs);
+		if (port->dma_config == QDMA_VERSAL_PL) {
+		      res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "cfg");
+		      port->cfg_base = devm_ioremap_resource(dev, res);
+		      if (IS_ERR(port->cfg_base))
+			      return PTR_ERR(port->cfg_base);
+		}
+		
+		port->reg_base = devm_platform_ioremap_resource_byname(pdev, "breg");
 		if (IS_ERR(port->reg_base))
 			return PTR_ERR(port->reg_base);
 
-		if (port->xdma_config == XDMA_ZYNQMP_PL) {
+		if (port->dma_config == XDMA_ZYNQMP_PL) {
 			val = pcie_read(port, XILINX_PCIE_REG_BIR);
 			val = (val >> XILINX_PCIE_FIFO_SHIFT) & MSI_DECD_MODE;
 			mode_val = pcie_read(port, XILINX_PCIE_REG_VSEC) &
@@ -717,7 +801,7 @@ static int xilinx_pcie_parse_dt(struct xilinx_pcie_port *port)
 			}
 		}
 
-		if (port->xdma_config == XDMA_VERSAL_PL)
+		if (port->dma_config == XDMA_VERSAL_PL || port->dma_config == QDMA_VERSAL_PL)
 			port->msi_mode = MSI_DECD_MODE;
 
 		if (port->msi_mode == MSI_DECD_MODE) {
@@ -781,7 +865,11 @@ static int xilinx_pcie_probe(struct platform_device *pdev)
 		return err;
 	}
 
-	xilinx_pcie_init_port(port);
+	err = xilinx_pcie_init_port(port);
+	if (err) {
+		dev_err(dev, "Init port failed\n");
+		return err;
+	}
 
 	err = xilinx_pcie_init_irq_domain(port);
 	if (err) {
@@ -813,6 +901,7 @@ static int xilinx_pcie_probe(struct platform_device *pdev)
 static const struct of_device_id xilinx_pcie_of_match[] = {
 	{ .compatible = "xlnx,xdma-host-3.00", },
 	{ .compatible = "xlnx,pcie-dma-versal-2.0", },
+	{ .compatible = "xlnx,qdma-host-3.00", },
 	{}
 };
 
